import { watch } from 'vue';
import { useAuthStore } from '@/stores/auth';
import { useCategoryStore } from '@/stores/categories';
import { useTaskStore } from '@/stores/tasks';

/**
 * Composable para manejar la inicializaci√≥n autom√°tica de datos
 * cuando el usuario se autentica
 */
export const useDataInitializer = () => {
  const authStore = useAuthStore();
  const categoryStore = useCategoryStore();
  const taskStore = useTaskStore();

  // Observar cambios en el estado de autenticaci√≥n
  watch(
    () => authStore.isLoggedIn,
    async (isLoggedIn, wasLoggedIn) => {
      if (isLoggedIn && !wasLoggedIn) {
        // Usuario acaba de iniciar sesi√≥n, cargar sus datos
        console.log('üë§ Usuario autenticado, cargando datos...');

        try {
          // Cargar categor√≠as y tareas en paralelo
          await Promise.all([
            categoryStore.loadCategories(),
            taskStore.loadTasks(),
          ]);

          categoryStore.ensureDefaultCategory();

          console.log('‚úÖ Datos del usuario cargados correctamente');
        } catch (error) {
          console.error('‚ùå Error al cargar datos del usuario:', error);

          // Si es un error de permisos, mostrar mensaje espec√≠fico
          if (error instanceof Error && error.message.includes('permissions')) {
            console.error(
              'üîí Error de permisos de Firestore. Verifica las reglas de seguridad.'
            );
            console.error(
              'üìã Ve a Firebase Console ‚Üí Firestore ‚Üí Reglas y configura las reglas de desarrollo.'
            );
          }
        }
      } else if (!isLoggedIn && wasLoggedIn) {
        // Usuario acaba de cerrar sesi√≥n, limpiar datos
        console.log('üëã Usuario cerr√≥ sesi√≥n, limpiando datos...');
        categoryStore.clearCategories();
        taskStore.clearTasks();
      }
    },
    { immediate: false }
  );

  // Funci√≥n para recargar todos los datos
  const refreshUserData = async () => {
    if (!authStore.isLoggedIn) {
      console.warn('No hay usuario autenticado para recargar datos');
      return;
    }

    try {
      await Promise.all([
        categoryStore.loadCategories(),
        taskStore.loadTasks(),
      ]);
      console.log('‚úÖ Datos del usuario recargados');
    } catch (error) {
      console.error('‚ùå Error al recargar datos:', error);
    }
  };

  return {
    refreshUserData,
  };
};
